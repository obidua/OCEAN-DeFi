const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/index-DLs_D8Nc.js","assets/hooks.module-Dz_XB4AG.js","assets/charts-BK1r30At.js","assets/vendor-CpL4RcAy.js","assets/web3-D16o4WFR.js","assets/index-4Da41pSs.js","assets/index-BnLWVyoY.js","assets/index-C0sLGmtH.js"])))=>i.map(i=>d[i]);
import{d as S,g as y,S as I,C as L,n as A,f as b,_ as D,P as _,w as x}from"./web3-D16o4WFR.js";import{h as V}from"./web3-D16o4WFR.js";import"./charts-BK1r30At.js";import"./vendor-CpL4RcAy.js";C.type="coinbaseWallet";function C(d={}){return d.version==="3"||d.headlessMode?W(d):N(d)}function N(d){let v,w,l,r;return S(c=>({id:"coinbaseWalletSDK",name:"Coinbase Wallet",rdns:"com.coinbase.wallet",type:C.type,async connect({chainId:n,withCapabilities:i,...t}={}){try{const e=await this.getProvider(),o=(await e.request({method:"eth_requestAccounts",params:"instantOnboarding"in t&&t.instantOnboarding?[{onboarding:"instant"}]:[]})).map(a=>y(a));w||(w=this.onAccountsChanged.bind(this),e.on("accountsChanged",w)),l||(l=this.onChainChanged.bind(this),e.on("chainChanged",l)),r||(r=this.onDisconnect.bind(this),e.on("disconnect",r));let s=await this.getChainId();if(n&&s!==n){const a=await this.switchChain({chainId:n}).catch(u=>{if(u.code===b.code)throw u;return{id:s}});s=(a==null?void 0:a.id)??s}return{accounts:i?o.map(a=>({address:a,capabilities:{}})):o,chainId:s}}catch(e){throw/(user closed modal|accounts received is empty|user denied account|request rejected)/i.test(e.message)?new b(e):e}},async disconnect(){var i;const n=await this.getProvider();w&&(n.removeListener("accountsChanged",w),w=void 0),l&&(n.removeListener("chainChanged",l),l=void 0),r&&(n.removeListener("disconnect",r),r=void 0),n.disconnect(),(i=n.close)==null||i.call(n)},async getAccounts(){return(await(await this.getProvider()).request({method:"eth_accounts"})).map(i=>y(i))},async getChainId(){const i=await(await this.getProvider()).request({method:"eth_chainId"});return Number(i)},async getProvider(){if(!v){const n=(()=>{var e;return typeof d.preference=="string"?{options:d.preference}:{...d.preference,options:((e=d.preference)==null?void 0:e.options)??"all"}})(),{createCoinbaseWalletSDK:i}=await D(async()=>{const{createCoinbaseWalletSDK:e}=await import("./index-DLs_D8Nc.js");return{createCoinbaseWalletSDK:e}},__vite__mapDeps([0,1,2,3,4]));v=i({...d,appChainIds:c.chains.map(e=>e.id),preference:n}).getProvider()}return v},async isAuthorized(){try{return!!(await this.getAccounts()).length}catch{return!1}},async switchChain({addEthereumChainParameter:n,chainId:i}){var o,s,a,u;const t=c.chains.find(f=>f.id===i);if(!t)throw new I(new L);const e=await this.getProvider();try{return await e.request({method:"wallet_switchEthereumChain",params:[{chainId:A(t.id)}]}),t}catch(f){if(f.code===4902)try{let h;n!=null&&n.blockExplorerUrls?h=n.blockExplorerUrls:h=(o=t.blockExplorers)!=null&&o.default.url?[(s=t.blockExplorers)==null?void 0:s.default.url]:[];let p;(a=n==null?void 0:n.rpcUrls)!=null&&a.length?p=n.rpcUrls:p=[((u=t.rpcUrls.default)==null?void 0:u.http[0])??""];const g={blockExplorerUrls:h,chainId:A(i),chainName:(n==null?void 0:n.chainName)??t.name,iconUrls:n==null?void 0:n.iconUrls,nativeCurrency:(n==null?void 0:n.nativeCurrency)??t.nativeCurrency,rpcUrls:p};return await e.request({method:"wallet_addEthereumChain",params:[g]}),t}catch(h){throw new b(h)}throw new I(f)}},onAccountsChanged(n){n.length===0?this.onDisconnect():c.emitter.emit("change",{accounts:n.map(i=>y(i))})},onChainChanged(n){const i=Number(n);c.emitter.emit("change",{chainId:i})},async onDisconnect(n){c.emitter.emit("disconnect");const i=await this.getProvider();w&&(i.removeListener("accountsChanged",w),w=void 0),l&&(i.removeListener("chainChanged",l),l=void 0),r&&(i.removeListener("disconnect",r),r=void 0)}}))}function W(d){let w,l,r,c,n;return S(i=>({id:"coinbaseWalletSDK",name:"Coinbase Wallet",rdns:"com.coinbase.wallet",type:C.type,async connect({chainId:t,withCapabilities:e}={}){try{const o=await this.getProvider(),s=(await o.request({method:"eth_requestAccounts"})).map(u=>y(u));r||(r=this.onAccountsChanged.bind(this),o.on("accountsChanged",r)),c||(c=this.onChainChanged.bind(this),o.on("chainChanged",c)),n||(n=this.onDisconnect.bind(this),o.on("disconnect",n));let a=await this.getChainId();if(t&&a!==t){const u=await this.switchChain({chainId:t}).catch(f=>{if(f.code===b.code)throw f;return{id:a}});a=(u==null?void 0:u.id)??a}return{accounts:e?s.map(u=>({address:u,capabilities:{}})):s,chainId:a}}catch(o){throw/(user closed modal|accounts received is empty|user denied account)/i.test(o.message)?new b(o):o}},async disconnect(){const t=await this.getProvider();r&&(t.removeListener("accountsChanged",r),r=void 0),c&&(t.removeListener("chainChanged",c),c=void 0),n&&(t.removeListener("disconnect",n),n=void 0),t.disconnect(),t.close()},async getAccounts(){return(await(await this.getProvider()).request({method:"eth_accounts"})).map(e=>y(e))},async getChainId(){const e=await(await this.getProvider()).request({method:"eth_chainId"});return Number(e)},async getProvider(){var t;if(!l){const e=await(async()=>{const{default:f}=await D(async()=>{const{default:h}=await import("./index-4Da41pSs.js").then(p=>p.i);return{default:h}},__vite__mapDeps([5,3,2,4,1]));return typeof f!="function"&&typeof f.default=="function"?f.default:f})();w=new e({...d,reloadOnDisconnect:!1});const o=(t=w.walletExtension)==null?void 0:t.getChainId(),s=i.chains.find(f=>d.chainId?f.id===d.chainId:f.id===o)||i.chains[0],a=d.chainId||(s==null?void 0:s.id),u=d.jsonRpcUrl||(s==null?void 0:s.rpcUrls.default.http[0]);l=w.makeWeb3Provider(u,a)}return l},async isAuthorized(){try{return!!(await this.getAccounts()).length}catch{return!1}},async switchChain({addEthereumChainParameter:t,chainId:e}){var a,u,f,h;const o=i.chains.find(p=>p.id===e);if(!o)throw new I(new L);const s=await this.getProvider();try{return await s.request({method:"wallet_switchEthereumChain",params:[{chainId:A(o.id)}]}),o}catch(p){if(p.code===4902)try{let g;t!=null&&t.blockExplorerUrls?g=t.blockExplorerUrls:g=(a=o.blockExplorers)!=null&&a.default.url?[(u=o.blockExplorers)==null?void 0:u.default.url]:[];let U;(f=t==null?void 0:t.rpcUrls)!=null&&f.length?U=t.rpcUrls:U=[((h=o.rpcUrls.default)==null?void 0:h.http[0])??""];const q={blockExplorerUrls:g,chainId:A(e),chainName:(t==null?void 0:t.chainName)??o.name,iconUrls:t==null?void 0:t.iconUrls,nativeCurrency:(t==null?void 0:t.nativeCurrency)??o.nativeCurrency,rpcUrls:U};return await s.request({method:"wallet_addEthereumChain",params:[q]}),o}catch(g){throw new b(g)}throw new I(p)}},onAccountsChanged(t){t.length===0?this.onDisconnect():i.emitter.emit("change",{accounts:t.map(e=>y(e))})},onChainChanged(t){const e=Number(t);i.emitter.emit("change",{chainId:e})},async onDisconnect(t){i.emitter.emit("disconnect");const e=await this.getProvider();r&&(e.removeListener("accountsChanged",r),r=void 0),c&&(e.removeListener("chainChanged",c),c=void 0),n&&(e.removeListener("disconnect",n),n=void 0)}}))}k.type="safe";function k(d={}){const{shimDisconnect:v=!1}=d;let w,l;return S(r=>({id:"safe",name:"Safe",type:k.type,async connect({withCapabilities:c}={}){var e;const n=await this.getProvider();if(!n)throw new _;const i=await this.getAccounts(),t=await this.getChainId();return l||(l=this.onDisconnect.bind(this),n.on("disconnect",l)),v&&await((e=r.storage)==null?void 0:e.removeItem("safe.disconnected")),{accounts:c?i.map(o=>({address:o,capabilities:{}})):i,chainId:t}},async disconnect(){var n;const c=await this.getProvider();if(!c)throw new _;l&&(c.removeListener("disconnect",l),l=void 0),v&&await((n=r.storage)==null?void 0:n.setItem("safe.disconnected",!0))},async getAccounts(){const c=await this.getProvider();if(!c)throw new _;return(await c.request({method:"eth_accounts"})).map(y)},async getProvider(){if(typeof window<"u"&&(window==null?void 0:window.parent)!==window){if(!w){const{default:n}=await D(async()=>{const{default:o}=await import("./index-BnLWVyoY.js").then(s=>s.e);return{default:o}},__vite__mapDeps([6,3,4,2])),i=new n(d),t=await x(()=>i.safe.getInfo(),{timeout:d.unstable_getInfoTimeout??10});if(!t)throw new Error("Could not load Safe information");const e=await(async()=>{const o=await D(()=>import("./index-C0sLGmtH.js").then(s=>s.i),__vite__mapDeps([7,3,6,4,2]));return typeof o.SafeAppProvider!="function"&&typeof o.default.SafeAppProvider=="function"?o.default.SafeAppProvider:o.SafeAppProvider})();w=new e(t,i)}return w}},async getChainId(){const c=await this.getProvider();if(!c)throw new _;return Number(c.chainId)},async isAuthorized(){var c;try{return v&&await((c=r.storage)==null?void 0:c.getItem("safe.disconnected"))?!1:!!(await this.getAccounts()).length}catch{return!1}},onAccountsChanged(){},onChainChanged(){},onDisconnect(){r.emitter.emit("disconnect")}}))}export{C as coinbaseWallet,V as injected,k as safe};
